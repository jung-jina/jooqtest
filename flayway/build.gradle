plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'nu.studer.jooq' version '8.2'
    id 'org.flywaydb.flyway' version '7.15.0'
}

group = 'com.jjin'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    flywayMigration
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:postgresql://localhost:5432/flyway_test'
    user = 'postgres'
    password = 'test1234'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.simpleflatmapper:sfm-jooq:8.2.3'
    jooqGenerator 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    flywayMigration 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    version = '3.18.4'
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = flyway.driver
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        excludes = 'flyway_schema_history'
                    }
                    target {
                        packageName = 'com.jjin.jooqtest'
                        directory = 'build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.example.JPrefixGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    dependsOn tasks.named('flywayMigrate')

    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)
    allInputsDeclared = true
}